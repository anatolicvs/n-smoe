24-04-18 14:45:52.142 :   task: lft_gan_unet
  model: gan
  gpu_ids: [0]
  scale: 4
  n_channels: 3
  sigma: [0, 50]
  sigma_test: 15
  merge_bn: False
  merge_bn_startpoint: 400000
  path:[
    root: superresolution
    pretrained_netG: None
    pretrained_netD: None
    pretrained_netE: None
    task: superresolution/lft_gan_unet
    log: superresolution/lft_gan_unet
    options: superresolution/lft_gan_unet/options
    models: superresolution/lft_gan_unet/models
    images: superresolution/lft_gan_unet/images
    pretrained_optimizerG: None
    pretrained_optimizerD: None
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: sr-lf
      dataroot_H: /mnt/d/LF/data_for_train
      data_name: ALL
      angRes: 5
      dataroot_L: None
      H_size: 660
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 16
      phw: 32
      stride: 2
      phase: train
      scale: 4
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: sr-lf
      dataroot_H: /mnt/d/LF/data_for_test
      angRes: 5
      dataroot_L: None
      data_name: ALL
      H_size: 660
      dataloader_num_workers: 8
      dataloader_batch_size: 1
      phw: 32
      stride: 2
      phase: test
      scale: 4
      n_channels: 3
    ]
  ]
  netG:[
    net_type: lft_gan
    angRes: 5
    scale_factor: 4
    channels: 64
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 4
  ]
  netD:[
    net_type: discriminator_unet
    in_nc: 1
    base_nc: 64
    act_mode: BL
    n_layers: 3
    norm_type: 3
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
  ]
  train:[
    G_lossfn_type: l2sum
    G_lossfn_weight: 0.01
    F_lossfn_type: l1
    F_lossfn_weight: 1
    F_feature_layer: 34
    F_weights: 1.0
    F_use_input_norm: True
    F_use_range_norm: False
    gan_type: gan
    D_lossfn_weight: 0.005
    E_decay: 0.999
    G_scheduler_T_max: 2000000
    D_scheduler_T_max: 2000000
    G_scheduler_eta_min: 1e-07
    D_scheduler_eta_min: 1e-07
    D_init_iters: 0
    G_optimizer_type: adam
    G_optimizer_lr: 0.001
    G_optimizer_wd: 0
    D_optimizer_type: adam
    D_optimizer_lr: 0.001
    D_optimizer_wd: 0
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 800000, 1200000, 2000000]
    G_scheduler_gamma: 0.5
    G_optimizer_reuse: False
    D_scheduler_type: MultiStepLR
    D_scheduler_milestones: [200000, 800000, 1200000, 2000000]
    D_scheduler_gamma: 0.5
    D_optimizer_reuse: False
    G_param_strict: True
    D_param_strict: True
    E_param_strict: True
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
  ]
  opt_path: options/train_lft_gan.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1
  rank: 0
  world_size: 1

24-04-18 14:45:52.175 : Number of train images: 1,820, iters: 114
24-04-18 14:45:54.487 : 
Networks name: get_model
Params number: 1163392
Net structure:
get_model(
  (pos_encoding): PositionEncoding()
  (conv_init0): Sequential(
    (0): Conv3d(1, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
  )
  (conv_init): Sequential(
    (0): Conv3d(64, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv3d(64, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): Conv3d(64, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
    (5): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (altblock): Sequential(
    (0): AltFilter(
      (spa_trans): SpaTrans(
        (MLP): Linear(in_features=576, out_features=128, bias=False)
        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=128, out_features=256, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=256, out_features=128, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
        (linear): Sequential(
          (0): Conv3d(128, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        )
      )
      (ang_trans): AngTrans(
        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=64, out_features=128, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=128, out_features=64, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (1): AltFilter(
      (spa_trans): SpaTrans(
        (MLP): Linear(in_features=576, out_features=128, bias=False)
        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=128, out_features=256, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=256, out_features=128, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
        (linear): Sequential(
          (0): Conv3d(128, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        )
      )
      (ang_trans): AngTrans(
        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=64, out_features=128, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=128, out_features=64, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (2): AltFilter(
      (spa_trans): SpaTrans(
        (MLP): Linear(in_features=576, out_features=128, bias=False)
        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=128, out_features=256, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=256, out_features=128, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
        (linear): Sequential(
          (0): Conv3d(128, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        )
      )
      (ang_trans): AngTrans(
        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=64, out_features=128, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=128, out_features=64, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (3): AltFilter(
      (spa_trans): SpaTrans(
        (MLP): Linear(in_features=576, out_features=128, bias=False)
        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=128, out_features=256, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=256, out_features=128, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
        (linear): Sequential(
          (0): Conv3d(128, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        )
      )
      (ang_trans): AngTrans(
        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=64, out_features=128, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=128, out_features=64, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
      )
    )
  )
  (upsampling): Sequential(
    (0): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): PixelShuffle(upscale_factor=4)
    (2): LeakyReLU(negative_slope=0.2)
    (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
)

Networks name: Discriminator_UNet
Params number: 4375745
Net structure:
Discriminator_UNet(
  (conv0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv2): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv3): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv4): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv5): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv6): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv9): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)

24-04-18 14:45:54.540 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.001 | -0.064 |  0.083 |  0.025 | torch.Size([64, 1, 1, 3, 3]) || conv_init0.0.weight
 |  0.000 | -0.035 |  0.032 |  0.008 | torch.Size([64, 64, 1, 3, 3]) || conv_init.0.weight
 | -0.000 | -0.032 |  0.035 |  0.008 | torch.Size([64, 64, 1, 3, 3]) || conv_init.2.weight
 | -0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 1, 3, 3]) || conv_init.4.weight
 | -0.000 | -0.036 |  0.035 |  0.008 | torch.Size([128, 576]) || altblock.0.spa_trans.MLP.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.0.spa_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.0.spa_trans.norm.bias
 |  0.000 | -0.088 |  0.088 |  0.051 | torch.Size([384, 128]) || altblock.0.spa_trans.attention.in_proj_weight
 |  0.000 | -0.078 |  0.072 |  0.018 | torch.Size([128, 128]) || altblock.0.spa_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.0.spa_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.0.spa_trans.feed_forward.0.bias
 |  0.000 | -0.054 |  0.055 |  0.013 | torch.Size([256, 128]) || altblock.0.spa_trans.feed_forward.1.weight
 |  0.000 | -0.054 |  0.048 |  0.012 | torch.Size([128, 256]) || altblock.0.spa_trans.feed_forward.4.weight
 |  0.000 | -0.061 |  0.069 |  0.018 | torch.Size([64, 128, 1, 1, 1]) || altblock.0.spa_trans.linear.0.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.0.ang_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.0.ang_trans.norm.bias
 |  0.001 | -0.125 |  0.125 |  0.072 | torch.Size([192, 64]) || altblock.0.ang_trans.attention.in_proj_weight
 |  0.000 | -0.090 |  0.093 |  0.025 | torch.Size([64, 64]) || altblock.0.ang_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.0.ang_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.0.ang_trans.feed_forward.0.bias
 |  0.000 | -0.065 |  0.079 |  0.018 | torch.Size([128, 64]) || altblock.0.ang_trans.feed_forward.1.weight
 |  0.000 | -0.061 |  0.061 |  0.018 | torch.Size([64, 128]) || altblock.0.ang_trans.feed_forward.4.weight
 | -0.000 | -0.037 |  0.034 |  0.008 | torch.Size([128, 576]) || altblock.1.spa_trans.MLP.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.1.spa_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.1.spa_trans.norm.bias
 |  0.000 | -0.088 |  0.088 |  0.051 | torch.Size([384, 128]) || altblock.1.spa_trans.attention.in_proj_weight
 |  0.000 | -0.061 |  0.065 |  0.018 | torch.Size([128, 128]) || altblock.1.spa_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.1.spa_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.1.spa_trans.feed_forward.0.bias
 |  0.000 | -0.049 |  0.053 |  0.012 | torch.Size([256, 128]) || altblock.1.spa_trans.feed_forward.1.weight
 | -0.000 | -0.055 |  0.047 |  0.013 | torch.Size([128, 256]) || altblock.1.spa_trans.feed_forward.4.weight
 |  0.000 | -0.067 |  0.067 |  0.018 | torch.Size([64, 128, 1, 1, 1]) || altblock.1.spa_trans.linear.0.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.1.ang_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.1.ang_trans.norm.bias
 | -0.001 | -0.125 |  0.125 |  0.072 | torch.Size([192, 64]) || altblock.1.ang_trans.attention.in_proj_weight
 |  0.000 | -0.093 |  0.088 |  0.025 | torch.Size([64, 64]) || altblock.1.ang_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.1.ang_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.1.ang_trans.feed_forward.0.bias
 | -0.000 | -0.063 |  0.061 |  0.018 | torch.Size([128, 64]) || altblock.1.ang_trans.feed_forward.1.weight
 |  0.000 | -0.062 |  0.066 |  0.018 | torch.Size([64, 128]) || altblock.1.ang_trans.feed_forward.4.weight
 | -0.000 | -0.036 |  0.034 |  0.008 | torch.Size([128, 576]) || altblock.2.spa_trans.MLP.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.2.spa_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.2.spa_trans.norm.bias
 | -0.000 | -0.088 |  0.088 |  0.051 | torch.Size([384, 128]) || altblock.2.spa_trans.attention.in_proj_weight
 |  0.000 | -0.068 |  0.067 |  0.018 | torch.Size([128, 128]) || altblock.2.spa_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.2.spa_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.2.spa_trans.feed_forward.0.bias
 | -0.000 | -0.048 |  0.049 |  0.012 | torch.Size([256, 128]) || altblock.2.spa_trans.feed_forward.1.weight
 | -0.000 | -0.052 |  0.047 |  0.012 | torch.Size([128, 256]) || altblock.2.spa_trans.feed_forward.4.weight
 |  0.000 | -0.070 |  0.060 |  0.018 | torch.Size([64, 128, 1, 1, 1]) || altblock.2.spa_trans.linear.0.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.2.ang_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.2.ang_trans.norm.bias
 | -0.000 | -0.125 |  0.125 |  0.072 | torch.Size([192, 64]) || altblock.2.ang_trans.attention.in_proj_weight
 |  0.000 | -0.088 |  0.078 |  0.025 | torch.Size([64, 64]) || altblock.2.ang_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.2.ang_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.2.ang_trans.feed_forward.0.bias
 | -0.000 | -0.057 |  0.067 |  0.018 | torch.Size([128, 64]) || altblock.2.ang_trans.feed_forward.1.weight
 |  0.000 | -0.069 |  0.064 |  0.018 | torch.Size([64, 128]) || altblock.2.ang_trans.feed_forward.4.weight
 | -0.000 | -0.038 |  0.038 |  0.008 | torch.Size([128, 576]) || altblock.3.spa_trans.MLP.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.3.spa_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.3.spa_trans.norm.bias
 |  0.000 | -0.088 |  0.088 |  0.051 | torch.Size([384, 128]) || altblock.3.spa_trans.attention.in_proj_weight
 | -0.000 | -0.065 |  0.072 |  0.018 | torch.Size([128, 128]) || altblock.3.spa_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.3.spa_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.3.spa_trans.feed_forward.0.bias
 |  0.000 | -0.062 |  0.055 |  0.013 | torch.Size([256, 128]) || altblock.3.spa_trans.feed_forward.1.weight
 |  0.000 | -0.056 |  0.048 |  0.013 | torch.Size([128, 256]) || altblock.3.spa_trans.feed_forward.4.weight
 |  0.001 | -0.067 |  0.065 |  0.018 | torch.Size([64, 128, 1, 1, 1]) || altblock.3.spa_trans.linear.0.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.3.ang_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.3.ang_trans.norm.bias
 |  0.000 | -0.125 |  0.125 |  0.072 | torch.Size([192, 64]) || altblock.3.ang_trans.attention.in_proj_weight
 | -0.000 | -0.074 |  0.081 |  0.025 | torch.Size([64, 64]) || altblock.3.ang_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.3.ang_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.3.ang_trans.feed_forward.0.bias
 | -0.000 | -0.082 |  0.064 |  0.018 | torch.Size([128, 64]) || altblock.3.ang_trans.feed_forward.1.weight
 | -0.000 | -0.065 |  0.063 |  0.018 | torch.Size([64, 128]) || altblock.3.ang_trans.feed_forward.4.weight
 | -0.000 | -0.025 |  0.027 |  0.006 | torch.Size([1024, 64, 1, 1]) || upsampling.0.weight
 |  0.001 | -0.025 |  0.024 |  0.008 | torch.Size([1, 64, 3, 3]) || upsampling.3.weight

24-04-18 15:01:09.755 :   task: lft_gan_unet
  model: gan
  gpu_ids: [0]
  scale: 4
  n_channels: 3
  sigma: [0, 50]
  sigma_test: 15
  merge_bn: False
  merge_bn_startpoint: 400000
  path:[
    root: superresolution
    pretrained_netG: None
    pretrained_netD: None
    pretrained_netE: None
    task: superresolution/lft_gan_unet
    log: superresolution/lft_gan_unet
    options: superresolution/lft_gan_unet/options
    models: superresolution/lft_gan_unet/models
    images: superresolution/lft_gan_unet/images
    pretrained_optimizerG: None
    pretrained_optimizerD: None
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: sr-lf
      dataroot_H: /mnt/d/LF/data_for_train
      data_name: ALL
      angRes: 5
      dataroot_L: None
      H_size: 660
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 8
      phw: 32
      stride: 2
      phase: train
      scale: 4
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: sr-lf
      dataroot_H: /mnt/d/LF/data_for_test
      angRes: 5
      dataroot_L: None
      data_name: ALL
      H_size: 660
      dataloader_num_workers: 8
      dataloader_batch_size: 1
      phw: 32
      stride: 2
      phase: test
      scale: 4
      n_channels: 3
    ]
  ]
  netG:[
    net_type: lft_gan
    angRes: 5
    scale_factor: 4
    channels: 64
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 4
  ]
  netD:[
    net_type: discriminator_unet
    in_nc: 1
    base_nc: 64
    act_mode: BL
    n_layers: 3
    norm_type: 3
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
  ]
  train:[
    G_lossfn_type: l2sum
    G_lossfn_weight: 0.01
    F_lossfn_type: l1
    F_lossfn_weight: 1
    F_feature_layer: 34
    F_weights: 1.0
    F_use_input_norm: True
    F_use_range_norm: False
    gan_type: gan
    D_lossfn_weight: 0.005
    E_decay: 0.999
    G_scheduler_T_max: 2000000
    D_scheduler_T_max: 2000000
    G_scheduler_eta_min: 1e-07
    D_scheduler_eta_min: 1e-07
    D_init_iters: 0
    G_optimizer_type: adam
    G_optimizer_lr: 0.001
    G_optimizer_wd: 0
    D_optimizer_type: adam
    D_optimizer_lr: 0.001
    D_optimizer_wd: 0
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 800000, 1200000, 2000000]
    G_scheduler_gamma: 0.5
    G_optimizer_reuse: False
    D_scheduler_type: MultiStepLR
    D_scheduler_milestones: [200000, 800000, 1200000, 2000000]
    D_scheduler_gamma: 0.5
    D_optimizer_reuse: False
    G_param_strict: True
    D_param_strict: True
    E_param_strict: True
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
  ]
  opt_path: options/train_lft_gan.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1
  rank: 0
  world_size: 1

24-04-18 15:01:10.239 : Number of train images: 1,820, iters: 228
24-04-18 15:01:27.682 : 
Networks name: get_model
Params number: 1163392
Net structure:
get_model(
  (pos_encoding): PositionEncoding()
  (conv_init0): Sequential(
    (0): Conv3d(1, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
  )
  (conv_init): Sequential(
    (0): Conv3d(64, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv3d(64, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): Conv3d(64, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
    (5): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (altblock): Sequential(
    (0): AltFilter(
      (spa_trans): SpaTrans(
        (MLP): Linear(in_features=576, out_features=128, bias=False)
        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=128, out_features=256, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=256, out_features=128, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
        (linear): Sequential(
          (0): Conv3d(128, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        )
      )
      (ang_trans): AngTrans(
        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=64, out_features=128, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=128, out_features=64, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (1): AltFilter(
      (spa_trans): SpaTrans(
        (MLP): Linear(in_features=576, out_features=128, bias=False)
        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=128, out_features=256, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=256, out_features=128, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
        (linear): Sequential(
          (0): Conv3d(128, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        )
      )
      (ang_trans): AngTrans(
        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=64, out_features=128, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=128, out_features=64, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (2): AltFilter(
      (spa_trans): SpaTrans(
        (MLP): Linear(in_features=576, out_features=128, bias=False)
        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=128, out_features=256, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=256, out_features=128, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
        (linear): Sequential(
          (0): Conv3d(128, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        )
      )
      (ang_trans): AngTrans(
        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=64, out_features=128, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=128, out_features=64, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (3): AltFilter(
      (spa_trans): SpaTrans(
        (MLP): Linear(in_features=576, out_features=128, bias=False)
        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=128, out_features=256, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=256, out_features=128, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
        (linear): Sequential(
          (0): Conv3d(128, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        )
      )
      (ang_trans): AngTrans(
        (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=False)
        )
        (feed_forward): Sequential(
          (0): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (1): Linear(in_features=64, out_features=128, bias=False)
          (2): ReLU(inplace=True)
          (3): Dropout(p=0.0, inplace=False)
          (4): Linear(in_features=128, out_features=64, bias=False)
          (5): Dropout(p=0.0, inplace=False)
        )
      )
    )
  )
  (upsampling): Sequential(
    (0): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): PixelShuffle(upscale_factor=4)
    (2): LeakyReLU(negative_slope=0.2)
    (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
)

Networks name: Discriminator_UNet
Params number: 4375745
Net structure:
Discriminator_UNet(
  (conv0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv2): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv3): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv4): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv5): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv6): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv9): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)

24-04-18 15:01:27.882 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.002 | -0.091 |  0.064 |  0.025 | torch.Size([64, 1, 1, 3, 3]) || conv_init0.0.weight
 | -0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 1, 3, 3]) || conv_init.0.weight
 |  0.000 | -0.034 |  0.032 |  0.008 | torch.Size([64, 64, 1, 3, 3]) || conv_init.2.weight
 | -0.000 | -0.033 |  0.038 |  0.008 | torch.Size([64, 64, 1, 3, 3]) || conv_init.4.weight
 |  0.000 | -0.034 |  0.036 |  0.008 | torch.Size([128, 576]) || altblock.0.spa_trans.MLP.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.0.spa_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.0.spa_trans.norm.bias
 |  0.000 | -0.088 |  0.088 |  0.051 | torch.Size([384, 128]) || altblock.0.spa_trans.attention.in_proj_weight
 | -0.000 | -0.075 |  0.071 |  0.018 | torch.Size([128, 128]) || altblock.0.spa_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.0.spa_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.0.spa_trans.feed_forward.0.bias
 |  0.000 | -0.049 |  0.046 |  0.012 | torch.Size([256, 128]) || altblock.0.spa_trans.feed_forward.1.weight
 | -0.000 | -0.052 |  0.048 |  0.012 | torch.Size([128, 256]) || altblock.0.spa_trans.feed_forward.4.weight
 | -0.000 | -0.060 |  0.059 |  0.018 | torch.Size([64, 128, 1, 1, 1]) || altblock.0.spa_trans.linear.0.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.0.ang_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.0.ang_trans.norm.bias
 |  0.001 | -0.125 |  0.125 |  0.073 | torch.Size([192, 64]) || altblock.0.ang_trans.attention.in_proj_weight
 | -0.001 | -0.086 |  0.096 |  0.025 | torch.Size([64, 64]) || altblock.0.ang_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.0.ang_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.0.ang_trans.feed_forward.0.bias
 |  0.000 | -0.079 |  0.069 |  0.018 | torch.Size([128, 64]) || altblock.0.ang_trans.feed_forward.1.weight
 | -0.000 | -0.067 |  0.069 |  0.018 | torch.Size([64, 128]) || altblock.0.ang_trans.feed_forward.4.weight
 |  0.000 | -0.038 |  0.034 |  0.008 | torch.Size([128, 576]) || altblock.1.spa_trans.MLP.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.1.spa_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.1.spa_trans.norm.bias
 |  0.000 | -0.088 |  0.088 |  0.051 | torch.Size([384, 128]) || altblock.1.spa_trans.attention.in_proj_weight
 | -0.000 | -0.063 |  0.068 |  0.018 | torch.Size([128, 128]) || altblock.1.spa_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.1.spa_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.1.spa_trans.feed_forward.0.bias
 |  0.000 | -0.047 |  0.047 |  0.012 | torch.Size([256, 128]) || altblock.1.spa_trans.feed_forward.1.weight
 |  0.000 | -0.058 |  0.057 |  0.013 | torch.Size([128, 256]) || altblock.1.spa_trans.feed_forward.4.weight
 |  0.000 | -0.066 |  0.063 |  0.018 | torch.Size([64, 128, 1, 1, 1]) || altblock.1.spa_trans.linear.0.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.1.ang_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.1.ang_trans.norm.bias
 |  0.000 | -0.125 |  0.125 |  0.072 | torch.Size([192, 64]) || altblock.1.ang_trans.attention.in_proj_weight
 |  0.000 | -0.092 |  0.085 |  0.025 | torch.Size([64, 64]) || altblock.1.ang_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.1.ang_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.1.ang_trans.feed_forward.0.bias
 | -0.000 | -0.062 |  0.061 |  0.018 | torch.Size([128, 64]) || altblock.1.ang_trans.feed_forward.1.weight
 |  0.000 | -0.065 |  0.064 |  0.018 | torch.Size([64, 128]) || altblock.1.ang_trans.feed_forward.4.weight
 | -0.000 | -0.032 |  0.035 |  0.008 | torch.Size([128, 576]) || altblock.2.spa_trans.MLP.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.2.spa_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.2.spa_trans.norm.bias
 |  0.001 | -0.088 |  0.088 |  0.051 | torch.Size([384, 128]) || altblock.2.spa_trans.attention.in_proj_weight
 |  0.000 | -0.064 |  0.068 |  0.018 | torch.Size([128, 128]) || altblock.2.spa_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.2.spa_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.2.spa_trans.feed_forward.0.bias
 |  0.000 | -0.048 |  0.051 |  0.013 | torch.Size([256, 128]) || altblock.2.spa_trans.feed_forward.1.weight
 | -0.000 | -0.046 |  0.050 |  0.013 | torch.Size([128, 256]) || altblock.2.spa_trans.feed_forward.4.weight
 | -0.000 | -0.064 |  0.061 |  0.018 | torch.Size([64, 128, 1, 1, 1]) || altblock.2.spa_trans.linear.0.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.2.ang_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.2.ang_trans.norm.bias
 |  0.000 | -0.125 |  0.125 |  0.072 | torch.Size([192, 64]) || altblock.2.ang_trans.attention.in_proj_weight
 |  0.000 | -0.087 |  0.091 |  0.025 | torch.Size([64, 64]) || altblock.2.ang_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.2.ang_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.2.ang_trans.feed_forward.0.bias
 | -0.000 | -0.068 |  0.062 |  0.018 | torch.Size([128, 64]) || altblock.2.ang_trans.feed_forward.1.weight
 | -0.000 | -0.070 |  0.067 |  0.018 | torch.Size([64, 128]) || altblock.2.ang_trans.feed_forward.4.weight
 |  0.000 | -0.037 |  0.036 |  0.008 | torch.Size([128, 576]) || altblock.3.spa_trans.MLP.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.3.spa_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.3.spa_trans.norm.bias
 |  0.000 | -0.088 |  0.088 |  0.051 | torch.Size([384, 128]) || altblock.3.spa_trans.attention.in_proj_weight
 |  0.000 | -0.066 |  0.067 |  0.018 | torch.Size([128, 128]) || altblock.3.spa_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([128]) || altblock.3.spa_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([128]) || altblock.3.spa_trans.feed_forward.0.bias
 |  0.000 | -0.052 |  0.050 |  0.013 | torch.Size([256, 128]) || altblock.3.spa_trans.feed_forward.1.weight
 | -0.000 | -0.051 |  0.049 |  0.013 | torch.Size([128, 256]) || altblock.3.spa_trans.feed_forward.4.weight
 | -0.000 | -0.059 |  0.066 |  0.018 | torch.Size([64, 128, 1, 1, 1]) || altblock.3.spa_trans.linear.0.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.3.ang_trans.norm.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.3.ang_trans.norm.bias
 |  0.001 | -0.125 |  0.125 |  0.072 | torch.Size([192, 64]) || altblock.3.ang_trans.attention.in_proj_weight
 | -0.000 | -0.094 |  0.087 |  0.025 | torch.Size([64, 64]) || altblock.3.ang_trans.attention.out_proj.weight
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || altblock.3.ang_trans.feed_forward.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || altblock.3.ang_trans.feed_forward.0.bias
 | -0.000 | -0.066 |  0.079 |  0.018 | torch.Size([128, 64]) || altblock.3.ang_trans.feed_forward.1.weight
 | -0.000 | -0.074 |  0.060 |  0.018 | torch.Size([64, 128]) || altblock.3.ang_trans.feed_forward.4.weight
 | -0.000 | -0.025 |  0.027 |  0.006 | torch.Size([1024, 64, 1, 1]) || upsampling.0.weight
 |  0.001 | -0.020 |  0.028 |  0.008 | torch.Size([1, 64, 3, 3]) || upsampling.3.weight

